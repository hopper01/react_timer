{"version":3,"sources":["components/time/Time.js","components/timer/Display.jsx","components/timer/Controls.jsx","components/timer/Timer.jsx","components/timerlist/TimerList.jsx","components/app/App.jsx","serviceWorker.js","index.js"],"names":["Time","timeInMilliseconds","time","hours","this","formatUnitOfTime","Math","floor","minutes","seconds","milliseconds","unitOfTime","substring","toString","Display","props","className","onClick","handleDeleteTimer","id","class","status","timerName","style","color","getTime","maxLength","value","onChange","e","onSecondsChanged","target","children","defaultProps","console","log","Controls","disabled","canStart","startTimer","stopTimer","resetTimer","alert","Timer","state","bind","clearInterval","interval","parseInt","setState","setInterval","prevState","Component","TimerList","timers","map","timer","key","App","addNewTimer","event","preventDefault","newTimer","Date","now","timerId","updatedTimer","filter","concat","type","placeholder","zw","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94fdbb02.chunk.js","sourcesContent":["export default class Time {\n    \n    getTime(timeInMilliseconds) {\n\n        let time = timeInMilliseconds;\n        \n        const hours = this.formatUnitOfTime(Math.floor( time / (60 * 60 * 1000)));\n        time = time % (60 * 60 * 1000);\n        \n        const minutes = this.formatUnitOfTime(Math.floor( time / (60 * 1000))); \n        time = time % (60 * 1000);\n        \n        const seconds = this.formatUnitOfTime(Math.floor( time / 1000 ));\n        time = time % 1000;\n        \n        const milliseconds = this.formatUnitOfTime(time % 1000);\n        \n        return `${hours}:${minutes}:${seconds}:${milliseconds}`;\n    }\n\n    formatUnitOfTime(unitOfTime) {\n        return unitOfTime < 10 ? `0${unitOfTime}`.substring(0,2) : unitOfTime.toString().substring(0,2);\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Time from '../time/Time';\nimport './styles/display.css';\n\n\nconst Display = (props) => {\n    const time = new Time();\n    const onChange = (e) => {\n        props.onSecondsChanged(e.target.value);\n    };\n    const deleteTimer = () => {\n    props.handleDeleteTimer(props.id);\n   }\n   return (\n       <div className=\"timer\">\n       <button\n       className = 'del-btn'\n       onClick = {deleteTimer}\n       ><i class=\"fas fa-trash\"></i></button>\n        <div className=\"clock\">\n            { \n                    props.status === 'started' &&\n                    <div className=\"display-time\">\n                        <h1>{props.timerName}</h1>\n                        <h2 className=\"ends\">Ends in</h2>\n                        <div className='run-time'\n                        style = {{color: props.time <= 10000 ? '#FE5C5C' : ''}}\n                        >{time.getTime(props.time)}</div>\n                    </div> \n            }\n            {\n                    props.status !== 'started' && \n                    <div>\n                    <div className='timer-name'>{props.timerName}</div>\n                    <div className=\"initial-input\">\n                        <div className=\"display-in-time\">\n                        {time.getTime(props.time)}\n                        </div>         \n                        <div className=\"input-time\">\n                        <input \n                            className = ''\n                            maxLength = '6'\n                            value = {props.seconds}\n                            onChange = {onChange}\n                        />\n                        </div>\n                    </div>\n                </div>\n                }\n                <div>\n                    {props.children}\n                </div>\n            </div>\n        </div>\n        );\n    }\nDisplay.defaultProps = {\n    seconds: 0,\n    status: null,\n    time: 0,\n    onSecondsChanged: (e) => console.log(e.target.value)\n};\n\nDisplay.propTypes = {\n    children: PropTypes.element,\n    seconds: PropTypes.number.isRequired,\n    status: PropTypes.string,\n    time: PropTypes.number,\n    onSecondsChanged: PropTypes.func\n};\nexport default Display\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles/controls.css'\n\n\nconst Controls = (props) => (\n                <div className=\"controls\">\n                    {\n                        props.status !== 'started' &&\n                        <button className=\"btn btn-lg btn-success start\"\n                            disabled={!props.canStart}\n                            onClick={props.startTimer}\n                            style ={{'marginTop': '1.8rem'}}\n                            >\n                            <div className=\"start\">\n                                <i class=\"fas fa-play\"></i>\n                            </div>\n                        </button>\n                    }\n\n                    {\n                        props.status === 'started' &&\n                        <button className=\"btn btn-lg btn-dark stop\"\n                            onClick={props.stopTimer}\n                            style = {{'marginTop': '19.8rem'}}\n                            >\n                            <div className=\"stop\">\n                                <i class=\"fas fa-stop\"></i>\n                            </div>\n                        </button>\n                    }\n                    <button className=\"btn btn-lg btn-primary\"\n                        onClick={props.resetTimer}\n                        style = {props.status === 'started'? {'marginTop': '19.8rem'}:{'marginTop': '1.8rem'}}\n                        >\n                        <div className=\"refresh\">\n                          <i class=\"fas fa-sync\"></i>\n                        </div>\n                    </button>\n                </div>\n);\n\nControls.defaultProps = {\n    startTimer: () => alert('startTimer'),\n    stopTimer: () => alert('stopTimer'),\n    resetTimer: () => alert('resetTimer'),\n    status: null,\n    canStart: false,\n};\n\nControls.propTypes = {\n    startTimer: PropTypes.func,\n    stopTimer: PropTypes.func,\n    resetTimer: PropTypes.func,\n    status: PropTypes.string,\n    canStart: PropTypes.bool\n};\n\nexport default Controls;","import React, { Component } from 'react';\nimport Display from './Display';\nimport Controls from './Controls';\n\nclass Timer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            seconds: 0,\n            time: 0,\n            status: null\n        };\n\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n        this.onSecondsChanged = this.onSecondsChanged.bind(this);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onSecondsChanged(seconds) {\n        seconds = parseInt(seconds);\n\n        if (seconds && typeof seconds === 'number') {\n            if (seconds <= 359999) {\n                this.setState(() => ({ seconds: seconds, time: seconds * 1000 }));\n            }\n        } else {\n            this.setState(() => ({ seconds: 0, time: 0 }));\n        }\n    }\n\n    startTimer() {\n        if (this.state.status !== 'started') {\n            this.interval = setInterval(() => {\n                if (this.state.time !== 0) {\n                    this.setState(prevState => ({ time: prevState.time - 10 }));\n                } else {\n                    this.setState(() => ({ seconds: 0, status: null, time: 0 }));\n\n                    clearInterval(this.interval);\n                }\n            }, 10);\n\n            this.setState(() => ({ status: 'started' }));\n        }\n    }\n\n    stopTimer() {\n        if (this.state.status && this.state.status === 'started') {\n\n            clearInterval(this.interval);\n\n            this.setState((prevState) => {\n                return ({\n                    status: 'stopped',\n                    seconds: Math.floor(prevState.time / 1000)\n                });\n            });\n        }\n    }\n\n    resetTimer() {\n        clearInterval(this.interval);\n\n        this.setState(() => ({ seconds: 0, status: null, time: 0 }));\n    }\n\n    render() {\n        return (\n            <div>\n                <Display seconds={this.state.seconds}\n                    status={this.state.status}\n                    time={this.state.time}\n                    onSecondsChanged={this.onSecondsChanged}\n                    timerName = {this.props.timerName}\n                    handleDeleteTimer = {this.props.handleDeleteTimer}\n                    id = {this.props.id}\n                    >\n                    <div>\n                        <Controls \n                            startTimer={this.startTimer}\n                            stopTimer={this.stopTimer}\n                            resetTimer={this.resetTimer}\n                            status={this.state.status}\n                            canStart={this.state.seconds > 0} />\n                    </div>\n                </Display>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React from \"react\";\nimport Timer from \"../timer/Timer\";\nimport \"../timer.css\";\n\nconst TimerList = (props) => (\n  <div className=\"timer-list\">\n    {props.timers.map((timer) => (\n      <Timer key = {timer.id} {...timer}\n      timerName = {timer.timerName}\n      handleDeleteTimer = {props.handleDeleteTimer}\n      id = {timer.id}\n       />\n    ))}\n  </div>\n);\n\nexport default TimerList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TimerList from '../timerlist/TimerList';\n\nclass App extends Component {\n      constructor() {\n            super();\n            this.state = {\n              timers : [],\n              timerName: ''\n        };\n        this.addNewTimer = this.addNewTimer.bind(this);\n        this.handleDeleteTimer = this.handleDeleteTimer.bind(this);\n      }\n  addNewTimer(event) {\n    event.preventDefault();\n      var newTimer = {\n      id: Date.now(),\n      timerName: this.state.timerName,\n    };\n    this.setState(prevState => ({\n      timers: [...prevState.timers, newTimer],\n      timerName: ''\n    }));\n  }\n  handleDeleteTimer(timerId) {\n    var updatedTimer = this.state.timers.filter(timer => {\n      return timer.id !== timerId;\n    });\n    \n    this.setState(prevState => ({\n      timers: [].concat(updatedTimer)\n    }));\n  }\n  render(){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <i class=\"fas fa-hourglass-half\"></i><span> React Timer</span>\n          </header>\n          <div className=\"conatiner\">\n            <div className=\"input-name\">\n              <input\n                type=\"text\"\n                placeholder=\"Create Timer\"\n                maxLength=\"25\"\n                value={this.state.timerName}\n                onChange={event => this.setState({ timerName : event.target.value })}zw\n              />\n              <button onClick={this.addNewTimer}>Add Timer</button>\n            </div>\n          </div>\n          <TimerList\n          timers = {this.state.timers}\n          handleDeleteTimer = {this.handleDeleteTimer}\n          />\n          <footer class=\"foot\">\n              <p>Coded By ~<span class=\"hh\">hopper</span></p>\n          </footer>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App title=\"Timer\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}